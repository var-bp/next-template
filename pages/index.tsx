import type { NextPage, GetStaticProps } from 'next';
import Head from 'next/head';
import useSWR from 'swr';
import axios from 'axios';
import Image from '../components/image';
import Icon from '../components/icon';
import { Container, H1, FooterLink, dFlex, justifyContentCenter } from '../pages-styles/home';

const fetcher = (url: string) => axios.get(url).then((res) => res.data);

const Home: NextPage = () => {
  // https://swr.vercel.app/docs/with-nextjs

  // SWR is intended to use the cache as a local state, because that state lives on the server it's more
  // adecuated and frees you from managing every manipulation in the state verbosely, like you have to do
  // with redux explicitly calling API calls anytime you dispatch an action.

  // From a certain way of looking at it, SWR is providing global state to your application via its cache
  // with the extra benefit of being able to invalidate that cache and refresh it with new data automatically.

  // Some scenario where I can see both coexisting, it's when you have a very complex data manipulation,
  // and you have to modify and delete information too often, I think that case will use some mix of redux
  // and the mutate function of SWR.
  const { data, error } = useSWR('https://jsonplaceholder.typicode.com/posts/1', fetcher);

  return (
    <>
      <Head>
        <title>Home page</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main>
        <Container>
          <H1>
            Welcome to <a href="https://nextjs.org">Next.js!</a>
          </H1>
          <Image />
        </Container>
      </main>
      <footer>
        <Container>
          <div css={[dFlex, justifyContentCenter]}>
            <FooterLink
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{' '}
              <span>
                <Icon name="vercel" width={72} height={16} fill="#000000" />
              </span>
            </FooterLink>
          </div>
        </Container>
      </footer>
    </>
  );
};

// https://nextjs.org/docs/basic-features/data-fetching
export const getStaticProps: GetStaticProps = async (context) => {
  try {
    const res = await axios.get('https://jsonplaceholder.typicode.com/posts');
    return {
      props: {
        posts: res.data,
      },
    };
  } catch (error) {
    return {
      props: {
        posts: [],
      },
    };
  }
};

export default Home;
